---
import BaseHead from "../components/BaseHead.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import { getCollection, render } from "astro:content";

// Get the homepage content
const homepageContent = await getCollection("homepage");
const homepage = homepageContent[0]; // Get the first (and only) homepage entry
const { Content } = await render(homepage);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<div class="page-layout">
			<!-- Left column: Custom scrollbar -->
			<div class="scrollbar-column">
				<div class="custom-scrollbar">
					<div class="scrollbar-track">
						<div class="ruler-markings"></div>
						<div class="scroll-indicator"></div>
					</div>
				</div>
			</div>

			<!-- Middle column: Content -->
			<div class="content-column">
				<main>
					<div class="hero-container">
						<div class="hero-text">
							<div class="hero-title">
								<div class="title-word">Cloudflare</div>
								<div class="title-word">Atlas</div>
							</div>
							<p class="hero-subtitle">{homepage.data.description}</p>
						</div>
					</div>
				</main>

				<!-- Content from MDX file -->
				<section class="content-section">
			<div class="scroll-content grid square-grid">
				<div class="content-panel">
					<h1>Developer Documentation</h1>
					<p>Dive into the details about Cloudflare's products.</p>
				</div>

				<div class="content-panel">
					<h1>Blogs</h1>
					<p>
						Read everything from technical deep-dives powering our technology to
						new ideas in the future of the internet.
					</p>
				</div>

				<div class="content-panel">
					<h1>Cloudflare Research</h1>
					<p>Learn how we are planning to help build a better internet.</p>
				</div>

				<div class="content-panel">
					<h1>Cloudflare University</h1>
					<p>Take courses to earn Cloudflare certifications.</p>
				</div>
			</div>
		</section>
			</div>

			<!-- Right column: Hero image -->
			<div class="image-column">
				<div class="hero-image">
					<img
						src={homepage.data.heroImage || "/atlas-logo-black.svg"}
						alt="Cloudflare Atlas Logo"
					/>
				</div>
			</div>
		</div>

		<script>
			import {
				animate,
				splitText,
				svg,
				stagger,
				random,
				createTimeline,
			} from "animejs";

			window.addEventListener("load", function () {
				console.log("Page loaded");

				// General helper function to ensure all instances are processed
				function forAllInstances(selector, callback) {
					const elements = document.querySelectorAll(selector);
					console.log(`Found ${elements.length} elements for: ${selector}`);
					return Array.from(elements).map(callback);
				}

				// Efficient helper - animates each element independently but simultaneously
				function animateAllText(selector, splitOptions, animationConfig) {
					const elements = document.querySelectorAll(selector);

					elements.forEach((element, index) => {
						const { words } = splitText(element, splitOptions);

						// Create independent animation for each paragraph
						// Add a base delay offset for each paragraph but keep same stagger direction
						const baseDelay = index * 200; // Delay each paragraph by 200ms

						animate(words, {
							...animationConfig,
							delay: (el, i) =>
								baseDelay + i * (animationConfig.delay?.stagger || 50),
						});
					});
				}

				// Animate text by line codeblock - simple approach for all paragraphs
				animateAllText(
					".content-panel p",
					{ words: { wrap: "clip" } },
					{
						y: [
							{ to: ["100%", "0%"] },
							{ to: "-100%", delay: 1500, ease: "in(3)" },
						],
						duration: 750,
						ease: "out(3)",
						delay: { stagger: 50 },
						loop: true,
						loopDelay: 100,
					},
				);

				// Logo rotation on scroll
				window.addEventListener("scroll", function () {
					const scrolled = window.pageYOffset;
					const rotation = scrolled * -0.1;

					const logoImg = document.querySelector(".hero-image img");
					if (logoImg) {
						logoImg.style.transform = `rotate(${rotation}deg)`;
					}
				});

				// Create custom scrollbar with ruler markings
				function createScrollbarMarkings() {
					const rulerMarkings = document.querySelector('.ruler-markings');
					console.log('Ruler markings container:', rulerMarkings);
					
					if (!rulerMarkings) {
						console.error('Could not find .ruler-markings element');
						return;
					}
					
					// Generate ruler marks (every 2% of height, every 5th is longer)
					for (let i = 1; i <= 49; i++) {
						const mark = document.createElement('div');
						mark.className = i % 5 === 0 ? 'ruler-mark long' : 'ruler-mark short';
						mark.style.top = `${i * 2}%`;
						mark.style.backgroundColor = '#ffffff';
						mark.style.position = 'absolute';
						mark.style.left = '50%';
						mark.style.transform = 'translateX(-50%)';
						mark.style.height = i % 5 === 0 ? '3px' : '1.5px';
						mark.style.width = i % 5 === 0 ? '20px' : '12px';
						console.log(`Created mark ${i} at ${i * 2}%`, mark);
						rulerMarkings.appendChild(mark);
					}
					
					console.log('Total marks created:', rulerMarkings.children.length);
				}
				
				// Add a small delay to ensure DOM is ready
				setTimeout(createScrollbarMarkings, 100);

				// Handle scroll indicator movement
				window.addEventListener("scroll", function () {
					const scrolled = window.pageYOffset;
					const maxScroll = document.body.scrollHeight - window.innerHeight;
					const scrollProgress = Math.min(scrolled / maxScroll, 1);
					
					// Move the scroll indicator
					const indicator = document.querySelector('.scroll-indicator');
					if (indicator) {
						// Position between 2% and 96% of the scrollbar height
						const indicatorPosition = 2 + (scrollProgress * 94);
						indicator.style.top = `${indicatorPosition}%`;
					}
				});
			});
		</script>

		<style>
			:root {
				overscroll-behavior: none;
			}

			/* Hide scrollbars completely */
			html {
				scrollbar-width: none; /* Firefox */
				-ms-overflow-style: none; /* IE and Edge */
			}

			html::-webkit-scrollbar {
				display: none;
			}

			* {
				scrollbar-width: none; /* Firefox */
				-ms-overflow-style: none; /* IE and Edge */
			}

			*::-webkit-scrollbar {
				display: none;
			}

			/* Three-column page layout */
			.page-layout {
				display: flex;
				width: 100vw;
				max-width: 100vw;
				min-height: 100vh;
				overflow-x: hidden;
			}

			.scrollbar-column {
				flex: 0 0 80px;
				position: relative;
			}

			.content-column {
				flex: 1;
				min-height: 100vh;
				max-width: calc(50vw - 80px);
				overflow: hidden;
			}

			.image-column {
				flex: 0 0 50vw;
				position: relative;
			}

			/* Custom vertical scrollbar */
			.custom-scrollbar {
				position: fixed;
				left: 1.5rem;
				top: 5vh;
				height: 90vh;
				width: 30px;
				z-index: 1000;
				pointer-events: none;
			}

			.scrollbar-track {
				position: relative;
				width: 100%;
				height: 100%;
				background: rgba(255, 255, 255, 0.1);
				border-radius: 15px;
				border: 1px solid rgba(255, 255, 255, 0.2);
				backdrop-filter: blur(5px);
			}

			.ruler-markings {
				position: absolute;
				width: 100%;
				height: 100%;
				pointer-events: none;
			}

			.ruler-mark {
				position: absolute;
				left: 50%;
				transform: translateX(-50%);
				height: 1.5px;
				background: #ffffff;
			}

			.ruler-mark.short {
				width: 12px;
			}

			.ruler-mark.long {
				width: 20px;
				height: 3px;
			}

			.scroll-indicator {
				position: absolute;
				left: 50%;
				transform: translateX(-50%);
				width: 20px;
				height: 3px;
				background: #ff4444;
				border-radius: 2px;
				box-shadow: 0 0 8px rgba(255, 68, 68, 0.5);
				transition: top 0.1s ease-out;
			}
			body {
				margin: 0;
				padding: 0;
				min-height: 100vh;
				overflow-x: hidden;
				background: linear-gradient(to bottom, #066eb9, #bbdefb);
				background-attachment: fixed;
				/* Hide default scrollbar */
				scrollbar-width: none; /* Firefox */
				-ms-overflow-style: none; /* IE and Edge */
			}

			/* Hide scrollbar for WebKit browsers (Chrome, Safari, Edge) */
			body::-webkit-scrollbar {
				display: none;
			}

			main {
				height: 100vh;
				display: flex;
				align-items: center;
				background: transparent;
			}
			
			.hero-container {
				width: 100%;
				padding: 0;
				box-sizing: border-box;
			}

			.hero-text {
				display: flex;
				flex-direction: column;
				justify-content: center;
				text-align: left;
				padding: 2rem;
				box-sizing: border-box;
				width: 100%;
				max-width: 100%;
			}

			.hero-title {
				margin: 0 0 1rem 0;
				width: 100%;
			}

			.title-word {
				font-size: clamp(3rem, 8vw, 6rem);
				font-weight: bold;
				line-height: 1.1;
				color: #333;
				display: block;
				white-space: normal;
				word-wrap: break-word;
				max-width: 100%;
			}

			.hero-subtitle {
				font-size: clamp(1.2rem, 3vw, 2rem);
				margin: 0;
				color: #333;
				font-weight: 300;
			}

			.hero-image {
				position: fixed;
				top: 0;
				right: 0;
				width: 50vw;
				height: 100vh;
				display: flex;
				justify-content: center;
				align-items: center;
				z-index: 1;
				background: linear-gradient(to bottom, #066eb9, #bbdefb);
			}

			.hero-image img {
				width: 65%;
				height: auto;
				max-width: 100%;
				object-fit: contain;
			}

			.content-section {
				color: #333;
				font-family: inherit;
				background: transparent;
				padding: 2rem;
				width: 100%;
				max-width: 100%;
				box-sizing: border-box;
			}

			.content-panel {
				width: calc(100% - 4rem);
				max-width: calc(100% - 4rem);
				margin: 75vh 0 0 0;
				background: rgba(255, 255, 255, 0.15);
				backdrop-filter: blur(10px);
				border: 1px solid rgba(255, 255, 255, 0.2);
				border-radius: 20px;
				padding: 2rem;
				box-sizing: border-box;
				word-wrap: break-word;
				overflow-wrap: break-word;
			}

			.content-panel:first-child {
				margin-top: 0;
			}

			.content-panel h1 {
				font-size: clamp(2rem, 5vw, 2.5rem);
				margin: 0 0 1.5rem 0;
				font-weight: bold;
				color: #333;
				word-wrap: break-word;
				max-width: 100%;
			}

			.content-panel h2 {
				font-size: clamp(1.5rem, 4vw, 2rem);
				margin: 2rem 0 1rem 0;
				font-weight: bold;
				color: #333;
				word-wrap: break-word;
				max-width: 100%;
			}

			.content-panel p {
				font-size: clamp(1rem, 3vw, 1.2rem);
				line-height: 1.6;
				margin: 0;
				color: #333;
				word-wrap: break-word;
				max-width: 100%;
			}

			@media (max-width: 768px) {
				.hero-container {
					flex-direction: column;
					text-align: left;
					min-height: auto;
					padding: 1rem;
				}

				.hero-text {
					order: 1;
					text-align: left;
				}

				.hero-image {
					order: 2;
					max-width: 80%;
				}

				.content-section {
					width: 100% !important;
					padding: 2rem;
				}
			}
		</style>
	</body>
</html>
